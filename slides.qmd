---
title: "Archetypal Analysis"
subtitle: "Characterizing data by \"extremes\""
author: "Aleix Alcacer Sales"
date: 2024/10/16
date-format: full
# institute: "Institut de Noves Tecnologies de la Imatge"
format:
    revealjs: 
        smaller: true
        scrollable: true
        slide-number: true
        fig-format: svg
        toc-depth: 1
        toc: true
        preview-links: auto
        footer: "Archetypal Analysis"
---

# Introduction

## The concept of *archetype*
	
- Etymologically, the term *archetype* is derived from the Ancient Greek *árkhō* 'to begin' and *túpos* 'sort, type'.

-  Some definitions of *archetype* include:
    1. a very typical example of a certain person or thing (*Oxford Dictionary*).
    2. a typical example of something, or the original model of something from which others are copied (*Cambridge Dictionary*).
    3. the original pattern or model of which all things of the same type are representations or copies (*Merriam-Webster Dictionary*).


**"An *archetype* is a typical form or prototype that other objects are derived from"**


## Example: *Inside Out*

In the movie, the main character, Riley, has five archetypal emotions: Joy, Sadness, Fear, Anger, and Disgust.

![Archetypal emotions in *Inside Out* movie ](static/introduction/inside_out_all.png)

---

### New emotions

However, as seen in *Inside Out 2*, not only exists these emotions, but also new emotions can be obtained by combining these:

![Mixed emotions in *Inside Out 2*](static/introduction/inside_out_mixed.png)

---

### Combining archetypal emotions

Therefore, a new wide range of emotions can be obtained by combining the archetypal emotions:

![New emotions obtained from combining the archetypal emotions](static/introduction/inside_out.png)


# Archetypal Analysis in Machine Learning

## Definition


# Archetypal Analysis vs Clustering

## Clustering

- Clustering is a technique used to group similar data points into clusters.
- The goal is to find groups of data points that are similar to each other and dissimilar to data points in other clusters.
- The prototypes of the clusters are the centroids of them.

| Property | Clustering | Archetypal Analysis |
|----------|------------|---------------------|
| Goal | Group similar data points | Find extreme points |
| Prototypes | Centroids | Extreme points |


## Example

Consider the following dataset representing a set of colors:

```{python}

from archetypes.datasets import make_archetypal_dataset
import numpy as np

# Create a dataset with 1000 samples
archetypes = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

X, _ = make_archetypal_dataset(archetypes=archetypes, shape=(500,), alpha=1)

generator = np.random.Generator(np.random.PCG64())
X_2 = generator.dirichlet(alpha=(5, 5, 5), size=500)

# Add to X the archetypes
X = np.vstack([X, archetypes])
X = np.vstack([X, X_2])
```

```{python}

#| fig-align: center

from archetypes.visualization import simplex
import matplotlib.colors as mcolors

# convert X to HEX colors
X_color = [mcolors.to_hex(x) for x in X]

# Plot the data
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.25, ax=ax)

# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

plt.show()
```


Q: Which three colors do you think best represent the dataset?

---

```{python}

#| fig-align: center
#| fig-cap: Clustering and Archetypal Analysis prototypes obtained

from sklearn.cluster import KMeans
from archetypes import AA

# Fit a KMeans model with 3 clusters
kmeans = KMeans(n_clusters=3, random_state=0).fit(X)
kmeans_prototypes = kmeans.cluster_centers_
kmeans_prototypes_color = [mcolors.to_hex(x) for x in kmeans_prototypes]

# Fit an AA model with 3 archetypes
aa = AA(n_archetypes=3, random_state=0).fit(X)
aa_prototypes = aa.archetypes_
aa_prototypes_color = [mcolors.to_hex(x) for x in aa_prototypes]

group_color = [kmeans_prototypes_color[label] for label in kmeans.labels_]

```

### Prototypes comparison

As you can imagine, the prototypes obtained by clustering and by archetypal analysis are different:

::: {.columns}

::: {.column width=50%}
::: {.fragment}
```{python}

#| fig-align: center
#| fig-cap: Clustering prototypes

# Plot the data
fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.1, ax=ax)

# Plot the KMeans centroids
ax = simplex(kmeans_prototypes, c=kmeans_prototypes_color, show_edges=False, show_vertices=False, alpha=1,s=150, marker="s", ax=ax)

# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

# create a legend with the same markers
from matplotlib.lines import Line2D
handles = [Line2D([0], [0], marker='s', color='w', label='Prototypes', markerfacecolor='black', markersize=10, linestyle='None')]

ax.legend(handles=handles, loc='lower right')


plt.show()

```
:::
:::
::: {.column width=50%}
::: {.fragment}
```{python}
#| fig-align: center
#| fig-cap: Archetypal Analysis prototypes


# Plot the data
fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.1, ax=ax)


# plot the AA archetypes
ax = simplex(aa_prototypes, c=aa_prototypes_color, show_edges=False, show_vertices=False, alpha=1, s=150, marker='D', ax=ax)


# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

# create a legend with the same markers
from matplotlib.lines import Line2D
handles = [Line2D([0], [0], marker='D', color='w', label='Prototypes', markerfacecolor='black', markersize=10, linestyle='None')]

ax.legend(handles=handles, loc='lower right')

plt.show()



plt.show()
```
:::
:::
:::

# Biarchetypal Analysis

## Definition



## Exemple

Consider the following dataset representing a set of colors where axis $X$ represents the hue and axis $Y$ the brightness:

```{python}

import os
import sys
module_path = os.path.abspath(os.path.join('..'))
if module_path not in sys.path:
    sys.path.append(module_path)
```

```{python}
#| fig-align: center
import numpy as np
x_hue = np.linspace(0, 1, 20, endpoint=False)
y_value = np.linspace(0.4, 1, 20, endpoint=False)

import matplotlib.colors as mcolors
xy_rgb = np.array([[mcolors.hsv_to_rgb([h, 1., value]) for h in x_hue] for value in y_value])


from archetypes.datasets import shuffle_dataset
# xy_rgb, _ = shuffle_dataset(xy_rgb, ndim=2, generator=0)

fig, ax = plt.subplots()
ax.imshow(xy_rgb)
ax.axis('off')
plt.show()
```

Q: Which archetypes do you think we will obtain from this dataset?

---

### Archetypes comparison

As you can imagine, the prototypes obtained by Archetypal Analysis and Biarchetypal Analysis are different:

::: {.fragment}
```{python}
#| fig-align: center
#| layout-ncol: 2
#| fig-cap:
#|   - <br> Archetypal Analysis with 2 archetypes in $Y$ axis
#|   - Archetypal Analysis with 3 archetypes in $X$ axis
#| 
from models.naa import NAA
import torch
xy_rgb_torch = torch.tensor(xy_rgb).float()

aa_model = NAA(n_archetypes=(2,), shape=(xy_rgb.shape))
aa_model.fit(xy_rgb_torch, n_epochs=1000, learning_rate=0.1)
aa_archetypes = aa_model.Z.detach().numpy()
aa_archetypes = xy_rgb[[0, 19], :]

aa_2_model = NAA(n_archetypes=(3,), shape=(xy_rgb.transpose(1, 0, 2).shape))
aa_2_model.fit(torch.tensor(xy_rgb.transpose(1, 0, 2)).float(), n_epochs=200, learning_rate=0.2)
aa_2_archetypes = aa_2_model.Z.detach().numpy()
aa_2_archetypes = xy_rgb.transpose(1, 0, 2)[[0, 6, 13], :]

fig, ax = plt.subplots(figsize=(8, 1))
ax.imshow(aa_archetypes)
ax.axis('off')
plt.show()

fig, ax = plt.subplots(figsize=(8, 1.5))
ax.imshow(aa_2_archetypes)
ax.axis('off')
plt.show()
```

:::

::: {.fragment}

```{python}
#| fig-align: center
#| fig-cap: Biarchetypal Analysis with 2 archetypes in $Y$ axis and 3 archetypes in $X$ axis
naa_model = NAA(n_archetypes=(2, 3), shape=(xy_rgb.shape))
naa_model.fit(xy_rgb_torch, n_epochs=1000, learning_rate=0.1)
naa_archetypes = naa_model.Z.detach().numpy()
naa_archetypes = xy_rgb[[0, 19]][:, [0, 6, 13]]


# two subplots in one line
fig, ax = plt.subplots(figsize=(1.5, 0.8))
ax.imshow(naa_archetypes)
ax.axis('off')
plt.show()
```
:::

# Conclusions

## Summary

- The concept of *archetype* refers to a typical form or prototype that other objects are derived from.
- Archetypal Analysis is a technique used to find extreme points (archetypes) in a dataset.
- The prototypes obtained by Archetypal Analysis often offers more interpretable results than clustering.
- Biarchetypal Analysis is an extension of Archetypal Analysis that allows to find archetypes in two dimensions simultaneously.

## Future work



## Main References

  - Alcacer, A., Epifanio, I., & Gual-Arnau, X. (2024). Biarchetype Analysis: Simultaneous Learning of Observations and Features Based on Extremes. IEEE Transactions on Pattern Analysis and Machine Intelligence, 1–12. https://doi.org/10.1109/TPAMI.2024.3400730
  - Cutler, A., & Breiman, L. (1994). Archetypal Analysis. Technometrics, 36(4), 338–347. https://doi.org/10.2307/1269949
  - Mørup, M., & Hansen, L. K. (2012). Archetypal analysis for machine learning and data mining. Neurocomputing, 80, 54–63. https://doi.org/10.1016/j.neucom.2011.06.033




## Acknowledgements

## Thank you ❤️ {.center}
